/*
Copyright 2016 OCAD University

Licensed under the Educational Community License (ECL), Version 2.0 or the New
BSD license. You may not use this file except in compliance with one these
Licenses.

You may obtain a copy of the ECL 2.0 License and BSD License at
https://raw.githubusercontent.com/fluid-project/chartAuthoring/master/LICENSE.txt
*/

/* global fluid, floe, jqUnit */

(function ($, fluid) {

    "use strict";

    fluid.registerNamespace("floe.tests.dashboard");

    // Tests JS-style "milliseconds since midnight 01 January, 1970 UTC" timestamps as generated by Date.now();
    floe.tests.dashboard.isParseableTime = function (timestamp) {
        var dateFromTimestamp = new Date(timestamp);
        // Test if we got a valid date from this
        return !isNaN(dateFromTimestamp.getTime());

    };

    jqUnit.test("Test eventInTimeAware grade", function () {
        jqUnit.expect(8);
        var that = floe.dashboard.eventInTimeAware();

        jqUnit.assertTrue("If created without a timestamp, gets a timestamp", that.model.timeEvents.created);

        jqUnit.assertTrue("Automatic timestamp generates a parseable time", floe.tests.dashboard.isParseableTime(that.model.timeEvents.created));

        jqUnit.assertTrue("A lastModified time event is generated", that.model.timeEvents.lastModified);

        jqUnit.assertTrue("LastModified time event is parseable", floe.tests.dashboard.isParseableTime(that.model.timeEvents.created));

        var existingCreatedTime = "2016-05-01T04:00:00.000Z";
        var existingModifiedTime = "2016-05-01T07:30:00.000Z";

        that = floe.dashboard.eventInTimeAware({
            model: {
                timeEvents: {
                    created: existingCreatedTime,
                    lastModified: existingModifiedTime
                }
            },
        });

        jqUnit.assertEquals("An existing created timestamp is respected", existingCreatedTime, that.model.timeEvents.created);

        jqUnit.assertEquals("An existing last modified timestamp is respected at creation", existingModifiedTime, that.model.timeEvents.lastModified);

        // These are different between every browser, so we can't test on a
        // fixed string; what's really being tested here is that the model
        // listeners work to relay
        var expectedFormattedDate = new Date(existingCreatedTime).toLocaleDateString();
        var expectedFormattedTime = new Date(existingCreatedTime).toLocaleTimeString();

        jqUnit.assertEquals("Expected formatted date is created from creation date", expectedFormattedDate, that.model.formattedDates.created);


        jqUnit.assertEquals("Expected formatted time is created from creation date", expectedFormattedTime, that.model.formattedTimes.created);

    });

})(jQuery, fluid);
