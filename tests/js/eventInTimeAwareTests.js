/*
Copyright 2016 OCAD University

Licensed under the Educational Community License (ECL), Version 2.0 or the New
BSD license. You may not use this file except in compliance with one these
Licenses.

You may obtain a copy of the ECL 2.0 License and BSD License at
https://raw.githubusercontent.com/fluid-project/chartAuthoring/master/LICENSE.txt
*/

/* global fluid, floe, jqUnit */

(function ($, fluid) {

    "use strict";

    fluid.registerNamespace("floe.tests.dashboard");

    fluid.defaults("floe.tests.dashboard.timeAwareComponent", {
        gradeNames: ["floe.dashboard.eventInTimeAware"],
        model: {
            value: "Hello world!"
        },
        // Model listener for updating modified when value is
        // updated
        modelListeners: {
            value: {
                funcName: "floe.dashboard.eventInTimeAware.setModifiedTimeStamp",
                args: "{that}",
                excludeSource: ["init", "setModifiedTimeStamp"]
            }
        }
    });

    // Tests JS-style "milliseconds since midnight 01 January, 1970 UTC" timestamps as generated by Date.now();
    floe.tests.dashboard.isParseableTime = function (timestamp) {
        var dateFromTimestamp = new Date(timestamp);
        // Test if we got a valid date from this
        return !isNaN(dateFromTimestamp.getTime());

    };

    jqUnit.test("Test eventInTimeAware grade", function () {
        jqUnit.expect(10);
        var that = floe.tests.dashboard.timeAwareComponent();

        jqUnit.assertTrue("If created without a timestamp, gets a timestamp", that.model.timeEvents.created);

        jqUnit.assertTrue("Automatic timestamp generates a parseable time", floe.tests.dashboard.isParseableTime(that.model.timeEvents.created));

        jqUnit.assertTrue("A modified time event is generated when created without a timestamp", that.model.timeEvents.modified);

        jqUnit.assertTrue("modified time event is parseable", floe.tests.dashboard.isParseableTime(that.model.timeEvents.created));

        var existingCreatedTime = "2016-05-01T04:00:00.000Z";
        var existingModifiedTime = "2016-05-01T07:30:00.000Z";

        that = floe.tests.dashboard.timeAwareComponent({
            model: {
                timeEvents: {
                    created: existingCreatedTime,
                    modified: existingModifiedTime
                }
            },
        });

        jqUnit.assertEquals("An existing created timestamp is respected at creation", existingCreatedTime, that.model.timeEvents.created);

        jqUnit.assertEquals("An existing last modified timestamp is respected at creation", existingModifiedTime, that.model.timeEvents.modified);

        // These are different between every browser, so we can't test on a
        // fixed string; what's really being tested here is that the model
        // listeners work to relay time changes
        var expectedFormattedDate = new Date(existingCreatedTime).toLocaleDateString();
        var expectedFormattedTime = new Date(existingCreatedTime).toLocaleTimeString();

        jqUnit.assertEquals("Expected formatted date is created from creation date", expectedFormattedDate, that.model.formattedDates.created);

        jqUnit.assertEquals("Expected formatted time is created from creation date", expectedFormattedTime, that.model.formattedTimes.created);

        // Make a change that should update the last modified time stamp
        that.applier.change("value", "Hello brave new world.");

        jqUnit.assertEquals("Created timestamp remains the same after a value change", existingCreatedTime, that.model.timeEvents.created);

        jqUnit.assertNotEquals("Last modified time stamp is updated after value change", existingModifiedTime, that.model.timeEvents.modified);

    });

})(jQuery, fluid);
